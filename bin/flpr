#!/usr/bin/python
"""
Flipper is simple string Encryption programme
Encrypts or decrypt a string

Positional arguments:
  STRING             A string of characters or to process

Optional arguments:
  -h, --help         show this help message and exit
  -c, --clip         Process content of clip, use with care
  -k KEY, --key KEY  Encryption key (default: uses text content in (~/.flprc)
                     as key)
  -s, --silent       stop print to standard out

AUTHORS:
    Aaron Goshine, Robert Merriman
DATE:
    Feb 2017
"""

import sys
import os
import subprocess
import argparse


def get_clipboard_data():
    """
    get the content of your default Clipboard
    """
    proc_handle = subprocess.Popen(['pbpaste'], stdout=subprocess.PIPE)
    proc_handle.wait()
    data = proc_handle.stdout.read()
    return data


def set_clipboard_data(data):
    """
    set the content of your default Clipboard
    @param data string
    @return string
    """
    proc_handle = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE)
    proc_handle.stdin.writelines(data)
    proc_handle.stdin.close()
    proc_handle.wait()
    sys.stdout.writelines('\nClipboard updated!\n')


def key_gen(key):
    """
    generate a unique numeric from string or return a default key
    @param key
    @return number
    """

    if key:
        return abs(hash(''.join(key)))
    try:
        with open(os.path.join(os.path.expanduser('~'),
                               '.flprc')) as file_handle:

            content = file_handle.readlines()
        if content:
            key = abs(hash(''.join(content)))
    except IOError:
        sys.stdout.writelines('\nPlease use the -k [KEY] switch, or Optional \
                ~/.flprc and a content\n')
        return None

    return key


def encode_string(chars, key):
    """
    Encrypts a string of chars with the key provided
    @param chars string
    @param key number
    @return sting
    """
    chars = [hex(ord(char[1]) ^ ((char[0] << 8) + key))
             for char in enumerate(chars)]

    cipher = ''.join(chars)
    return cipher.replace('0x', 'r') + "=="


def decode_cipher(chars, key):
    """
    Decrypts a string of chars with the key provided
    @param chars string
    @param key number
    @return sting
    """

    chars = chars.replace('=', '')
    hexico = chars.split('r')[1:]
    for chunk in enumerate(hexico):
        try:
            hexico[chunk[0]] = chr(int('0x' + chunk[1], 16) ^
                                   ((chunk[0] << 8) + key))
        except ValueError:
            sys.stdout.writelines('\nYou cipher is corrupted or your key\
                    does not match!\n')
            return ''
    return ''.join(hexico)


def main(args):
    """
    Flipper is simple string Encryption programme
    Encrypts or decrypt a string

    Positional arguments:
    STRING             A string of characters or to process

    Optional arguments:
    -h, --help         show this help message and exit
    -c, --clip         Process content of clip, use with care
    -k KEY, --key KEY  Encryption key (default: uses text content in (~/.flprc)
                        as key)
    -s, --silent       stop print to standard out
    """
    key = key_gen(args.key)
    if not key:
        return 1

    chars = args.chars
    if args.clip:
        chars = get_clipboard_data()

    len_of_word = len(chars)
    if len_of_word > 0 and chars[-2:] == '==':
        cipher = decode_cipher(chars, key)
    else:
        cipher = encode_string(chars, key)
    set_clipboard_data(cipher)

    if not args.silent:
        sys.stdout.writelines("\n" + cipher + "\n")


if __name__ == "__main__":
    ARGS_PARSER = argparse.ArgumentParser(description='Encrypts or\
            decrypt a string')

    ARGS_PARSER.add_argument('-c', '--clip', dest='clip', action='store_true',
                             help='Process content of clip, use with care')

    ARGS_PARSER.add_argument('-k', '--key', dest='key', type=str,
                             help='Encryption key (default: uses text content \
                                in (~/.flprc) as key)')

    ARGS_PARSER.add_argument('-s', '--silent', dest='silent',
                             action='store_true',
                             help='stop print to standard out')

    ARGS_PARSER.add_argument('chars', metavar='STRING', type=str,
                             help='A string of characters or to process')

    main(ARGS_PARSER.parse_args())
